{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","js/service/FetchService.js","js/app.js"],"names":["FetchService","fetchLink","headers","query","Error","fetch","method","rawResponse","json","content","console","error","body","JSON","stringify","fetchService","window","location","href","includes","queryString","search","encodedResponse","split","decodedResponse","decodeURIComponent","responseJSON","parse","sourceName","source","name","sourceUsername","username","targetName","target","targetUsername","followersFollowed","Array","from","followers_followed","count","length","titleTxt","descriptionTxt","document","getElementById","innerHTML","listElement","forEach","listItem","createElement","classList","add","appendChild","submitForm","e","form","preventDefault","btnSubmit","disabled","setTimeout","jsonFormData","buildJsonFormData","buildHeaders","performPostHttpRequest","response","responseEncoding","encodeURIComponent","alert","authorization","FormData","pair","sampleForm","querySelector","addEventListener"],"mappings":"AEAA,ACAA,ACAA,AHAA;ACCA,ACAA,ACAA,AHAA,ADDA;AEEA,ACAA,ACAA,AJDA;AEEA,ACAA,ACAA,AJDA;AEEA,ACAA,ACAA,AJDA;AEEA,ACAA,ACAA,AJDA;AEEA,ACAA,ACAA,AJDA,AMLA;AJOA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA;AEEA,AEAA,AJDA,AMbA;AJeA,AFDA,AMbA,IAAMe,ADHef,YCGH,GAAG,IAAIA,qBAAJ,EAArB;AJeA,AFDA,AMbA,ADHI,0BAAc;AHkBlB,AFDA,AKjBkB;AHmBlB,AFDA,AMbA,ADHK;AHkBL,AFDA;AEEA,AFDA,AMdA,IAAIgB,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,QAArB,CAA8B,UAA9B,CAAJ,EAA+C;AJgB/C,AFDA,AMdE,MAAMC,WAAW,GAAGJ,MAAM,CAACC,QAAP,CAAgBI,MAApC;AJgBF,AFDA,AMdE,MAAMC,eAAe,GAAGF,WAAW,CAACG,KAAZ,CAAkB,OAAlB,EAA2B,CAA3B,CAAxB;AJgBF,AFDA,AMdE,MAAMC,eAAe,GAAGC,kBAAkB,CAACH,eAAD,CAA1C,iEDL8BrB,WAAWC;AHqB3C,AFDA,AMdE,MAAMwB,YAAY,GAAGb,IAAI,CAACc,KAAL,CAAWH,eAAX,CAArB;AJgBF,AFDA,AMbE,MAAMI,UAAU,GAAGF,YAAY,CAACG,MAAb,CAAoBC,IAAvC;AJeF,AFDA,AMbE,MAAMC,cAAc,GAAGL,YAAY,CAACG,MAAb,CAAoBG,QAA3C;AJeF,AFDA,AMbE,MAAMC,UAAU,GAAGP,YAAY,CAACQ,MAAb,CAAoBJ,IAAvC;AJeF,AFDA,AMbE,MAAMK,cAAc,GAAGT,YAAY,CAACQ,MAAb,CAAoBF,QAA3C;AJeF,AFDA,AMbE,MAAMI,iBAAiB,GAAGC,KAAK,CAACC,IAAN,CAAWZ,YAAY,CAACa,kBAAxB,CAA1B;AJeF,AFDA,AMbE,MAAMC,KAAK,GAAGJ,iBAAiB,CAACK,MAAhC,CAX6C,CAa7C;AJaF,AFDA;AEEA,AFDA,AMZE,ADhBkDtC,MCgB9CuC,QAAJ,EDhBkDvC,gEAAM;AH8B1D,AFDA,AMZE,MAAIwC,cAAJ;AJcF,AFDA,sBK7BW,CAAC1C,SAAD,IAAc,CAACC;AL8B1B,AMbE,MAAIsC,KAAK,GAAG,CAAZ,EAAe;ANcjB,AMbI;ANcJ,AMbIE,IAAAA,QAAQ,cAAOP,cAAP,sBAAiCK,KAAjC,kBAA8CT,cAA9C,kBAAR;ANcJ,AMbG,GAHD,MAGM;ANcR,AMbI,sBDpBc,IAAI3B,KAAJ,CAAU,oDAAV;ALkClB,AMbIsC,IAAAA,QAAQ,cAAOP,cAAP,sCAAiDJ,cAAjD,kBAAR;ANcJ,AMbG,GAtB4C,CAuB7C;ANaF,AMZE;ANaF,AMZE;ANaF,AMZE,uBDvBoC1B,KAAK,CAACJ,SAAD,EAAY;ALoCvD,AMZE,ADvBcK,kBAAAA,MAAM,EAAE,KAD+B;ALqCvD,AMZE,ADvBcJ,kBAAAA,OAAO,EAAEA,OAF8B;ALsCvD,AMZE,ADvBcC,kBAAAA,KAAK,EAAGA,KAAK,IAAI,IAAV,GAAkBA,KAAlB,GAA0B;ALoCjD,AMZE,AD3BqD,iBAAZ;ALwC3C,AMZE;ANaF,AMZE;ANaF,AMZE,AD9BgBI,gBAAAA;AL2ClB,AMZE;ANaF,AMZE,uBD3BgCA,WAAW,CAACC,IAAZ;ALwClC,AMZE;ANaF;AACA,AK1CkBC,gBAAAA;AL2ClB,AMdEmC,EAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,SAApC,ED5BiBrC,CC4B+BiC,QAAhD,CArC6C,CAsC7C;ANcF;AACA,AMbE,MAAIK,WAAW,GAAGH,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAlB;ANcF,AMbET,EAAAA,iBAAiB,CAACY,OAAlB,CAA0B,UAAAxC,IAAI,EAAI;ANcpC,AMbI;ANcJ,AMbI,AD/BQE,QC+BJuC,QAAQ,AD/BJvC,GC+BOkC,ID/BA,CAACjC,GC+BO,CAACuC,CD/BhB,YC+BO,CAAuB,IAAvB,CAAf;ANcJ,AMbID,IAAAA,QAAQ,CAACE,SAAT,CAAmBC,GAAnB,CAAuB,QAAvB,EAHgC,CAIhC;ANaJ;AACA,AMbI,QAAMtB,IAAI,GAAGtB,IAAI,CAACsB,IAAlB;ANcJ,AMbI,QAAME,QAAQ,GAAGxB,IAAI,CAACwB,QAAtB;ANcJ,AMbIiB,IAAAA,QAAQ,CAACH,SAAT,aAAwBhB,IAAxB,gBAAkCE,QAAlC,OAPgC,CAQhC;ANaJ;AACA,AMbIe,IAAAA,WAAW,CAACM,WAAZ,CAAwBJ,QAAxB;ANcJ,AMbG,GAVD;ANwBF,AMbC;ANcD,AMZA;ANaA;AACA;AACA,SMdeK;ANef;AACA;AACA;AACA;AACA,wFMnBA,iBAA0BC,CAA1B,EAA6BC,IAA7B;ANoBA,AMpBA;ANqBA,AMrBA,8HDtCiCvD,WAAWC,SAASU;AL4DrD,AMtBA;ANuBA,AMvBA;ANwBA,AMxBA;ANyBA,AMxBI;ANyBJ,AMxBI2C,YAAAA,CAAC,CAACE,cAAF,GAFJ,CAGI;ANwBJ,AMvBI,sBDzCO,CAACxD,SAAD,IAAc,CAACC,OAAf,IAA0B,CAACU;ALiEtC;AACA,AMxBU8C,YAAAA,SALV,GAKsBd,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CALtB;AN8BA,AMxBIa,YAAAA,SAAS,CAACC,QAAV,GAAqB,IAArB;ANyBJ,AMxBIC,YAAAA,UAAU,CAAC;ANyBf,AMzBe,qBAAMF,CD3CH,IAAItD,IC2CQ,CAACuD,AD3Cb,CAAU,OC2CP,GAAqB,KAA3B,sCD3CG;ALqElB,AM1Be,aAAD,EAAmC,IAAnC,CAAV,CAPJ,CAQI;AN0BJ;AACA,AM1BUE,YAAAA,YATV,GASyBC,iBAAiB,CAACN,IAAD,CAT1C,EAUI;AN0BJ;AACA,AM1BUtD,YAAAA,OAXV,GAWoB6D,CD5CkB1D,KAAK,CAACJ,KC4CZ,EAXhC,EAYI,AD7CuC,EAAY;ALuEvD,AKtEgBK,kBAAAA,MAAM,EAAE,MAD+B;ALwEvD,AMvCA,AD/BgBJ,kBAAAA,OAAO,EAAEA,OAF8B;ALyEvD,AMxCA,AD9BgBU,kBAAAA,CC2CWG,GD3CP,EAAEF,IAAI,CAACC,EC2CY,CAACkD,MD3ClB,CAAepD,IAAf,WC2CK,gEAAmGV,OAAnG,EAA4G2D,YAA5G,CAb3B;ANyCA,AK1EuD,iBAAZ;AL2E3C,AM1CA;AN2CA,AM9BUI,YAAAA,QAbV;AN4CA,AM9BI,AD/Cc1D,gBAAAA;AL8ElB,AM9BU2D,YAAAA,gBAfV,GAe6BC,kBAAkB,CAACtD,IAAI,CAACC,SAAL,CAAemD,QAAf,CAAD,CAf/C,EAgBI;AN8BJ,uBK1EkC1D,WAAW,CAACC,IAAZ;AL2ElC,AM9BI,gBAAGyD,QAAH,EACIjD,MAAM,CAACC,QAAP,+BAAuCiD,gBAAvC,EADJ,KAGIE,KAAK,qBAAL;AN4BR;AACA,AMjDA,AD5BkB3D,gBAAAA;AL8ElB,AMlDA,kDD3BmBA;AL8EnB,AMnDA;ANoDA,AMpDA;ANqDA,AMrDA;ANsDA,AMtDA;ANuDA,AMvDA,ADxBYC,gBAAAA,OAAO,CAACC,KAAR;ALgFZ;AACA;AACA;AACA,AMpCA,SAASoD,YAAT,GAA4C;ANqC5C,AMrC4C,MAAtBM,aAAsB,uEAAN,IAAM;ANsC5C,AMrCI,MAAMnE,OAAO,GAAG;ANsCpB,AMrCQ,oBAAgB,kBADJ;ANuCpB,AMrCQ,qBAAkBmE,aAAD,GAAkBA,aAAlB,GAAkC;ANsC3D,AMxCoB,GAAhB;ANyCJ,AMrCI,SAAOnE,OAAP;ANsCJ,AMrCC;ANsCD;AACA,AMrCA,SAAS4D,iBAAT,CAA2BN,IAA3B,EAAiC;ANsCjC,AMrCI,MAAMK,YAAY,GAAG,EAArB;ANsCJ;AACA,AMxCiC,6CAEX,IAAIS,QAAJ,CAAad,IAAb,CAFW;ANyCjC,AMzCiC;AN0CjC;AACA,AM3CiC;AN4CjC,AM1CI,wDAAsC,qEDpDVvD,WAAWC,SAASU;AL+FpD,AM3C0C,UAA5B2D,IAA4B;AN4C1C,AM3CQV,MAAAA,YAAY,CAACU,IAAI,CAAC,CAAD,CAAL,CAAZ,GAAwBA,IAAI,CAAC,CAAD,CAA5B;AN4CR,AM3CK;AN4CL,AMhDiC;ANiDjC,AMjDiC;ANkDjC,AMlDiC,sBDjDtB,CAACtE,SAAD,IAAc,CAACC,OAAf,IAA0B,CAACU;ALoGtC,AMnDiC;ANoDjC,AMpDiC;ANqDjC;AACA,AMjDI,SAAOiD,YAAP;ANkDJ,AMjDC,sBDtDiB,IAAIzD,KAAJ,CAAU,qDAAV;ALwGlB,AMjDA;ANkDA;AACA,AMjDA;ANkDA;AACA,uBKzGsCC,KAAK,CAACJ,SAAD,EAAY;AL0GvD,AMnDA,ADtDgBK,ICsDVkE,UAAU,GAAG5B,CDtDHtC,MAAM,CCsDK,CAACmE,ADtDJ,KAD+B,QCuDpC,CAAuB,aAAvB,CAAnB;ANoDA,AKzGgBvE,kBAAAA,OAAO,EAAEA,OAF8B;AL4GvD,AMpDA,ADrDgBU,ICqDb4D,UAAH,EAAe,EDrDC5D,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AL0GtB,AMpDI4D,ADzDmD,ECyDnDA,UAAU,CAACE,IDzD4B,YCyDvC,CAA4B,QAA5B,EAAsC,UAASnB,CAAT,EAAY;ANqDtD,AMpDQD,IAAAA,UAAU,CAACC,CAAD,EAAI,IAAJ,CAAV;ANqDR,AMpDK,GAFD;ANuDJ,AMpDC,AD5DiBhD,gBAAAA;ALiHlB,AMpDA;ANqDA,uBK7GkCA,WAAW,CAACC,IAAZ;AL8GlC;AACA;AACA,AKhHkBC,gBAAAA;ALiHlB,kDKhHmBA;ALiHnB;AACA;AACA;AACA;AACA,AKlHYC,gBAAAA,OAAO,CAACC,KAAR;ALmfile":"app.c3f9f951.js","sourceRoot":"../src","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","export default class FetchService {\n    constructor() {\n\n    }\n\n    async performGetHttpRequest(fetchLink, headers, query=null) {\n        if(!fetchLink || !headers) {\n            throw new Error(\"One or more GET request parameters was not passed.\");\n        }\n        try {\n            const rawResponse = await fetch(fetchLink, {\n                method: \"GET\",\n                headers: headers,\n                query: (query != null) ? query : \"\"\n            });\n            const content = await rawResponse.json();\n            return content;\n        }\n        catch(err) {\n            console.error(`Error at fetch GET: ${err}`);\n            throw err;\n        }\n    }\n\n    async performPostHttpRequest(fetchLink, headers, body) {\n        if(!fetchLink || !headers || !body) {\n            throw new Error(\"One or more POST request parameters was not passed.\");\n        }\n        try {\n            const rawResponse = await fetch(fetchLink, {\n                method: \"POST\",\n                headers: headers,\n                body: JSON.stringify(body)\n            });\n            const content = await rawResponse.json();\n            return content;\n        }\n        catch(err) {\n            console.error(`Error at fetch POST: ${err}`);\n            throw err;\n        }\n    }\n\n    async performPutHttpRequest(fetchLink, headers, body) {\n        if(!fetchLink || !headers || !body) {\n            throw new Error(\"One or more POST request parameters was not passed.\");\n        }\n        try {\n            const rawResponse = await fetch(fetchLink, {\n                method: \"PUT\",\n                headers: headers,\n                body: JSON.stringify(body)\n            });\n            const content = await rawResponse.json();\n            return content;\n        }\n        catch(err) {\n            console.error(`Error at fetch PUT: ${err}`);\n            throw err;\n        }\n    }\n}","import FetchService from './service/FetchService';\n\n/*-- Objects --*/\nconst fetchService = new FetchService();\n/*-- /Objects --*/\n\n/*-- On Load -- */\nif (window.location.href.includes('/success')) {\n  const queryString = window.location.search;\n  const encodedResponse = queryString.split(\"?res=\")[1];\n  const decodedResponse = decodeURIComponent(encodedResponse);\n  const responseJSON = JSON.parse(decodedResponse);\n\n  const sourceName = responseJSON.source.name;\n  const sourceUsername = responseJSON.source.username;\n  const targetName = responseJSON.target.name;\n  const targetUsername = responseJSON.target.username;\n  const followersFollowed = Array.from(responseJSON.followers_followed);\n  const count = followersFollowed.length;\n\n  // 1. Set title text on success page\n  var titleTxt;\n  var descriptionTxt;\n  if (count > 0) {\n    // titleTxt = `You're legitimate!`;\n    titleTxt = `@${targetUsername} follows ${count} of @${sourceUsername}'s followers:`\n  } else{\n    // titleTxt = `You're not there yet, but keep working on it!`;\n    titleTxt = `@${targetUsername} does not follow any of @${sourceUsername}'s followers:`\n  }\n  // if (count > 1) {\n  //   titleTxt = `Found ${count} followers!`;\n  // } else if (count === 1) {\n  //   titleTxt = `Found 1 follower!`;\n  // } else {\n  //   titleTxt = `No followers found`;\n  // }\n  // if (count > 1) {\n  //   titleTxt = `${targetName} follows ${count} accounts that follow ${sourceName}`;\n  // } else if (count === 1) {\n  //   titleTxt = `${targetName} follows 1 account that follows ${sourceName}`;\n  // } else {\n  //   titleTxt = `${targetName} does not follow anyone that follows ${sourceName}`;\n  // }\n  document.getElementById('lblTitle').innerHTML = titleTxt;\n  // document.getElementById('lblDescription').innerHTML = descriptionTxt;\n\n  let listElement = document.getElementById('listElement');\n  followersFollowed.forEach(json => {\n    // 1. Create an item for follower\n    let listItem = document.createElement('li');\n    listItem.classList.add('result');\n    // 2. Add the item text\n    const name = json.name;\n    const username = json.username;\n    listItem.innerHTML = `${name} (@${username})`;\n    // 3. Add listItem to the listElement\n    listElement.appendChild(listItem);\n  })\n}\n\n/*--Functions--*/\nasync function submitForm(e, form) {\n    // 1. Prevent reloading page\n    e.preventDefault();\n    // 2. Submit the form\n    // 2.1 User Interaction\n    const btnSubmit = document.getElementById('btnSubmit');\n    btnSubmit.disabled = true;\n    setTimeout(() => btnSubmit.disabled = false, 2000);\n    // 2.2 Build JSON body\n    const jsonFormData = buildJsonFormData(form);\n    // 2.3 Build Headers\n    const headers = buildHeaders();\n    // 2.4 Request & Response\n    const response = await fetchService.performPostHttpRequest(`https://drrhop28ba.execute-api.us-east-1.amazonaws.com/dev/`, headers, jsonFormData);\n    // 2.5 Encode response\n    const responseEncoding = encodeURIComponent(JSON.stringify(response));\n    // 2.6 Inform user of result\n    if(response)\n        window.location = `/success.html?res=${responseEncoding}`;\n    else\n        alert(`An error occured.`);\n}\n\nfunction buildHeaders(authorization = null) {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": (authorization) ? authorization : \"Bearer TOKEN_MISSING\"\n    };\n    return headers;\n}\n\nfunction buildJsonFormData(form) {\n    const jsonFormData = { };\n    for(const pair of new FormData(form)) {\n        jsonFormData[pair[0]] = pair[1];\n    }\n    return jsonFormData;\n}\n/*--/Functions--*/\n\n/*--Event Listeners--*/\nconst sampleForm = document.querySelector(\"#sampleForm\");\nif(sampleForm) {\n    sampleForm.addEventListener(\"submit\", function(e) {\n        submitForm(e, this);\n    });\n}\n/*--/Event Listeners--*/\n"]}